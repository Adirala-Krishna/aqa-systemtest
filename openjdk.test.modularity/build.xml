<?xml version="1.0"?>
<!--
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<project name="openjdk.test.modularity" default="build">

	<echo message="Executing openjdk.test.modularity/build.xml"/>

	<!-- Set default for source_root.  -->
	<property name="source_root" location="../"/>
	
	<!-- Set default for STF location.  -->
	<!-- Assumes source repositories are checked out under a common root - e.g. and the repository
		has been built in-situ - i.e.
		stf repository: /home/userid/git/stf
		java.svt repository: /home/userid/git/java.svt
		If the stf repository has been cloned or built to a different location, the stf_root property
		must be set on the command line - e.g. -Dstf_root=/my_stf_build_dir
	-->
	<property name="stf_root" location="${source_root}/../stf"/>

	<!-- Import settings used by multiple projects.  -->
	<import file="${stf_root}/stf.build/include/top.xml"/>
    <property name="openjdk_systemtest_root" location="${source_root}/../openjdk-systemtest"/>

	<!-- We think that you need a directory above the package structure to hold the module.java file -->

	<property name="openjdk_test_modularity_module" value="openjdk.test.modularity" />
    <property name="openjdk_test_modularity_src_dir" value="src" />
	<property name="openjdk_test_modularity_bin_dir" value="bin" /> 
	<!-- <property name="openjdk_test_modularity_bin_dir" value="${openjdk_systemtest_root}/${openjdk_test_modularity_module}/bin" /> --> 

	<property name="openjdk_test_modularity_jlink_testcase_src" value="${openjdk_systemtest_root}/${openjdk_test_modularity_module}/${openjdk_test_modularity_src_dir}/tests/com.test.jlink"/>
	<property name="openjdk_test_modularity_jlink_testcase_bin" value="${openjdk_systemtest_root}/${openjdk_test_modularity_module}/${openjdk_test_modularity_bin_dir}/tests/com.test.jlink"/>
	<property name="openjdk_test_modularity_jlink_nativedir" value="${openjdk_systemtest_root}/${openjdk_test_modularity_bin_dir}/tests/com.test.jlink/native"/>
	<property name="openjdk_test_modularity_jlink_outdir" value="${openjdk_test_modularity_jlink_nativedir}/bin"/>
	<property name="openjdk_test_modularity_jlink_headerdir" value="${openjdk_test_modularity_jlink_nativedir}/lib"/>

	<!--List of JNI testcases-->
	<property name="openjdk_test_modularity_native_src" value= "JniTest"/>
	
	<!-- List of source JNI test Java files that need headers -->
	<property name="openjdk_test_modularity_java_src" value= "JniTest"/>

	<path id="project.class.path">
		<path refid="junit.class.path" />	
		<path refid="stf.class.path" />
		<path path="${openjdk_test_modularity_bin_dir}/" />
		<path path="${openjdk_test_modularity_bin_dir}/common" />
		<path path="${openjdk_test_modularity_bin_dir}/common-mods/displayService" />	
	</path>
	
	<path id="jlink.project.class.path">
		<path refid="junit.class.path" />	
		<path refid="stf.class.path" />
		<path path="${openjdk_test_modularity_jlink_testcase_bin}"/>
	</path>	
	
	<path id="module.path">
		<path path="${openjdk_test_modularity_bin_dir}/common-mods" />
	</path>

	<!--From Java10, the 'javah' executable has been replaced with 'javac with options'. 
		We need to determine which Java version we are using and use the correct executable 
		to generate the header file based on that.
		javac requires both the -h and -d options, javah only the -d option.
	-->

	<condition property="openjdk_test_modularity_use_javah" value="true" else="false">
		<or>
			<equals arg1="${java_java_specification_version}" arg2="1.8"/>
			<equals arg1="${java_java_specification_version}" arg2="9"/>
		</or>
	</condition>

	<target name="build" depends="check-prereqs, build-no-natives, build-natives">
	</target>

	<target name="check-compiler-level">
		<condition property="can_build_modularity" value="true">
			<not>
				<equals arg1="${java_java_specification_version}" arg2="1.8"/>
			</not>
		</condition>
		<condition property="can_build_modularity_natives_windows" value="true">
			<and>
				<equals arg1="${can_build_modularity}" arg2="true"/>
				<equals arg1="${is_windows}" arg2="true"/>
				<equals arg1="${windows_native_compiler_present}" arg2="true"/>
			</and>
		</condition>
		<condition property="can_build_modularity_natives_unix" value="true">
			<and>
				<equals arg1="${can_build_modularity}" arg2="true"/>
				<not>
					<equals arg1="${is_windows}" arg2="true"/>
				</not>
			</and>
		</condition>
		<echo message="java_java_specification_version is ${java_java_specification_version}"/>
		<echo message="can_build_modularity is ${can_build_modularity}"/>
		<echo message="can_build_modularity_natives_unix is ${can_build_modularity_natives_unix}"/>
		<echo message="can_build_modularity_natives_windows is ${can_build_modularity_natives_windows}"/>
	</target>
	
	<target name="build-no-natives" depends="check-prereqs, check-compiler-level, build-java, build-javah">
	</target>

	<target name="build-archives" depends="build-jar" if="can_build_modularity">
	</target>	

	<target name="build-jar" depends="build-java, create-bin-dir" if="can_build_modularity">
		<jar destfile="${openjdk_test_modularity_jar_file}">
			<fileset dir="${openjdk_test_modularity_bin_dir}" includes="**/*.class" />
		</jar>
	</target>

	<target name="build-java" depends="check-prereqs, create-bin-dir" description="Using ${java_compiler} to compile the source" if="can_build_modularity">
		<apply executable="${java_compiler}" failonerror="true" parallel="true">
			<arg value="-d" />
			<arg value="${openjdk_test_modularity_bin_dir}/common-mods" />

			<arg value="--class-path" />
			<arg pathref="project.class.path" />
			
			<arg value="--module-source-path" />
			<arg value="${openjdk_test_modularity_src_dir}/common-mods" />

			<arg value="--module-path" />
			<arg value="${openjdk_test_modularity_bin_dir}" />

			<fileset dir="${openjdk_test_modularity_src_dir}/common-mods" includes="**/*.java" />
		</apply>

		<property name="openjdk_test_modularity_javac_ran" value="true"/>

		<apply executable="${java_compiler}" failonerror="true" parallel="true">
			<arg value="-d" />
			<arg value="${openjdk_test_modularity_bin_dir}/common-override" />

			<arg value="--class-path" />
			<arg pathref="project.class.path" />
			
			<arg value="--module-source-path" />
			<arg value="${openjdk_test_modularity_src_dir}/common-override" />

			<arg value="--module-path" />
			<arg value="${openjdk_test_modularity_bin_dir}" />

			<fileset dir="${openjdk_test_modularity_src_dir}/common-override" includes="**/*.java" />
		</apply>

		<apply executable="${java_compiler}" failonerror="true" parallel="true">
			<arg value="-d" />
			<arg value="${openjdk_test_modularity_bin_dir}/common-override-new" />

			<arg value="--class-path" />
			<arg pathref="project.class.path" />
			
			<arg value="--module-source-path" />
			<arg value="${openjdk_test_modularity_src_dir}/common-override-new" />

			<arg value="--module-path" />
			<arg value="${openjdk_test_modularity_bin_dir}" />

			<fileset dir="${openjdk_test_modularity_src_dir}/common-override-new" includes="**/*.java" />
		</apply>

		<apply executable="${java_compiler}" failonerror="true" parallel="true">
			<arg value="-d" />
			<arg value="${openjdk_test_modularity_bin_dir}/common/displayServiceImpl3" />

			<arg value="--class-path" />
			<arg pathref="project.class.path" />

			<fileset dir="${openjdk_test_modularity_src_dir}/common/displayServiceImpl3" includes="**/*.java" />
		</apply>

		<apply executable="${java_compiler}" failonerror="true" parallel="true">
			<arg value="-d" />
			<arg value="${openjdk_test_modularity_bin_dir}/common/displayServiceImpl4" />

			<arg value="--class-path" />
			<arg pathref="project.class.path" />

			<fileset dir="${openjdk_test_modularity_src_dir}/common/displayServiceImpl4" includes="**/*.java" />
		</apply>
		
		<copy todir="${openjdk_test_modularity_bin_dir}/common/displayServiceImpl3/META-INF">
			<fileset dir="${openjdk_test_modularity_src_dir}/common/displayServiceImpl3/META-INF" 
				includes="**"/>
		</copy> 

 	    <copy todir="${openjdk_test_modularity_bin_dir}/common/displayServiceImpl4/META-INF">
			<fileset dir="${openjdk_test_modularity_src_dir}/common/displayServiceImpl4/META-INF" 
				includes="**"/>
        </copy>
			
		<copy todir="${openjdk_test_modularity_bin_dir}/common-mods/com.discreet/adoptopenjdk/test/modularity/exported">
			<fileset dir="${openjdk_test_modularity_src_dir}/common-mods/com.discreet/adoptopenjdk/test/modularity/exported"
				includes="**/*.properties" />
		</copy>
		
		<copy todir="${openjdk_test_modularity_bin_dir}/tests/com.test/net/adoptopenjdk/test/modularity/junit">
		    <fileset dir="${openjdk_test_modularity_src_dir}/tests/com.test/net/adoptopenjdk/test/modularity/junit"
		        includes="**/*.properties" />
		</copy>
		
		<copy todir="${openjdk_test_modularity_bin_dir}/tests/com.test.jlink/conf">
			<fileset dir="${openjdk_test_modularity_src_dir}/tests/com.test.jlink/conf"
				includes="**/*.properties" />
		</copy>

		<apply executable="${java_compiler}" failonerror="true" parallel="true">
			<arg value="-d" />
			<arg value="${openjdk_test_modularity_bin_dir}/common" />

			<arg value="--class-path" />
			<arg pathref="project.class.path" />

			<fileset dir="${openjdk_test_modularity_src_dir}/common" includes="**/*.java" excludes="displayServiceImpl*/*.java" />
		</apply>

		<apply executable="${java_compiler}" failonerror="true" parallel="true">
			<arg value="-d" />
			<arg value="${openjdk_test_modularity_bin_dir}/tests" />

			<arg value="--class-path" />
			<arg pathref="project.class.path" />

			<arg value="--module-path" />
			<arg pathref="module.path" />
			
			<arg value="--module-source-path" />
			<arg value="${openjdk_test_modularity_src_dir}/tests" />
			
			<arg value="--add-reads" />
			<arg value="com.test=ALL-UNNAMED" />
			
			<arg value="--add-reads" />
			<arg value="com.test.serviceloaders=ALL-UNNAMED,displayService" />

			<arg value="--add-reads" />
			<arg value="com.test.serviceloaders2=ALL-UNNAMED,displayService" />

			<arg value="--add-reads" />
			<arg value="com.test.jlink=ALL-UNNAMED" />
			
			<fileset dir="${openjdk_test_modularity_src_dir}/tests" includes="**/*.java" excludes="**/JniTest.java"/>
		</apply>
		
		<echo>${toString:project.class.path}</echo>
		<apply executable="${java_compiler}" failonerror="true" parallel="true">
			<arg value="--source-path" />
			<arg value="${openjdk_test_modularity_src_dir}/com.stf" />
			<arg value="-d" />
			<arg value="${openjdk_test_modularity_bin_dir}" />
			<arg value="--class-path" />
			<arg pathref="project.class.path" />
			<fileset dir="${openjdk_test_modularity_src_dir}/com.stf" includes="**/*.java" />
		</apply>
	</target> 
	
	<target name="create-bin-dir">
		<mkdir dir="${openjdk_test_modularity_bin_dir}"/>
		<mkdir dir="${openjdk_test_modularity_bin_dir}/common-mods"/>
		<mkdir dir="${openjdk_test_modularity_bin_dir}/common-override"/>
		<mkdir dir="${openjdk_test_modularity_bin_dir}/common-override-new"/>
		<mkdir dir="${openjdk_test_modularity_bin_dir}/tests"/>
		<mkdir dir="${openjdk_test_modularity_bin_dir}/common"/>
		<mkdir dir="${openjdk_test_modularity_bin_dir}/common/displayServiceImpl3"/>
		<mkdir dir="${openjdk_test_modularity_bin_dir}/common/displayServiceImpl4"/>
		<mkdir dir="${openjdk_test_modularity_jlink_headerdir}"/>
	</target>
	
	<!-- This block will check if javac ran by checking if openjdk_test_modularity_javac_ran is true -->
	<target name="check-if-javac-ran">
		<condition property="openjdk_test_modularity_javac_did_not_run">
			<not>
				<isset property="openjdk_test_modularity_javac_ran"/>
			</not>
		</condition>
		<echo message="openjdk_test_modularity_javac_ran is ${openjdk_test_modularity_javac_ran}" />
		<echo message="openjdk_test_modularity_javac_did_not_run is ${openjdk_test_modularity_javac_did_not_run}" />
	</target>
	
	<target name="build-javah" depends="check-prereqs, check-if-javac-ran, use-javah, use-javac" unless="openjdk_test_modularity_javac_did_not_run">
		<!-- Build JNI files using javah or javac -->
		<!-- According to the ant doc, javah will not recreate a header file if it already exists.
			 So we need to delete header files in order to rebuild them.
			 The relationship between a class file and its generated header file is not simple.
			 The package name is prepended to the class file name (underscores replacing dots in the package name)
			 and for inner classes the '$' in the class file name is replaced by an underscore too.
			 The dependency checking here checks whether the javac actually recreated any class files when it
			 ran in the build-java task.  If any class files were created, all the header files are deleted and
			 recreated. This means that most of the time, when the test cases are not being worked on, rebuilding the
			 header files will be skipped.
		-->
	</target>

	<target name="use-javah" if="${openjdk_test_modularity_use_javah}">
		<!-- First delete the header files -->
		<delete includeemptydirs="true" verbose="true">
			<fileset dir="${openjdk_test_modularity_jlink_headerdir}" includes="adoptopenjdk_openjdk_test_modularity_jlink_JniTest.h"/>
		</delete>
		<!-- Then recreate them -->
		<exec executable="${java_bindir}/javah" failonerror="true">
			<arg value="-classpath"/>
			<arg pathref="jlink.project.class.path" />
			<arg value="-h" />
			<arg value="${openjdk_test_modularity_jlink_headerdir}"/>
			<arg value="adoptopenjdk.test.modularity.jlink.JniTest"/>
		</exec>
	</target>

	<target name="use-javac" unless="${openjdk_test_modularity_use_javah}">
		<!-- First delete the header files -->
		<delete includeemptydirs="true" verbose="true">
			<fileset dir="${openjdk_test_modularity_jlink_headerdir}" includes="adoptopenjdk_openjdk_test_modularity_jlink_JniTest.h"/>
		</delete>
		<!-- Then recreate them -->
		<exec executable="${java_compiler}" failonerror="true">
			<arg value="-classpath"/>
			<arg pathref="jlink.project.class.path" />
			<arg value="-d" />
			<arg value="${openjdk_test_modularity_bin_dir}/tests" />
			<arg value="-h" />
			<arg value="${openjdk_test_modularity_jlink_headerdir}"/>
			<arg value="${openjdk_test_modularity_src_dir}/tests/com.test.jlink/adoptopenjdk/test/modularity/jlink/JniTest.java"/>
		</exec>
	</target>
	
	<target name="build-natives" depends="check-prereqs, check-compiler-level, setup-native-build-command, build-natives-windows, build-natives-unix">
	</target>
	
	<target name="setup-native-build-command" if="can_build_modularity">
		<echo message="building natives for java-platform ${java_platform}"/>
		<property name="openjdk_test_modularity_native_build_command" value="${setup_windows_build_env}make -C ${openjdk_test_modularity_jlink_testcase_src}/native SRC=${openjdk_test_modularity_native_src} PLATFORM=${java_platform} JAVA_HOME=${java_home} OUTDIR=${openjdk_test_modularity_jlink_outdir} HEADERDIR=${openjdk_test_modularity_jlink_headerdir} OSNAME=${java_osname}"/>
		<tempfile property="openjdk_test_modularity_native_build_command_file" destDir="${java.io.tmpdir}" prefix="openjdk.build.command."/>
	</target>

	<target name="build-natives-windows" if="can_build_modularity_natives_windows">
		<echo message="${openjdk_test_modularity_native_build_command}" file="${openjdk_test_modularity_native_build_command_file}.bat"/>
		<exec executable="${openjdk_test_modularity_native_build_command_file}.bat" failonerror="true"/>
		<delete file="${openjdk_test_modularity_native_build_command_file}.bat" verbose="true"/>
	</target>

	<target name="build-natives-unix" if="can_build_modularity_natives_unix">
		<echo message="${openjdk_test_modularity_native_build_command}" file="${openjdk_test_modularity_native_build_command_file}.sh"/>
		<exec executable="/bin/sh" failonerror="true">
			<arg value="${openjdk_test_modularity_native_build_command_file}.sh"/>
		</exec>
		<delete file="${openjdk_test_modularity_native_build_command_file}.sh" verbose="true"/>
	</target>

	<target name="clean">
		<delete dir="${openjdk_test_modularity_bin_dir}"/>
	</target>
	
</project>
